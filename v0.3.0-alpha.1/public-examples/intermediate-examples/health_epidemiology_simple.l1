// Health: Epidemiology - Disease Spread Model (Simplified)
println("=== HEALTH: Epidemiology - Disease Spread Model ===");

function sir_model_simple(initial_susceptible, initial_infected, initial_recovered, 
                         transmission_rate, recovery_rate, time_periods) {
    let susceptible = initial_susceptible;
    let infected = initial_infected;
    let recovered = initial_recovered;
    let total_population = susceptible + infected + recovered;
    
    println("Day 0: S=" + to_string(round(susceptible)) + 
            " I=" + to_string(round(infected)) + 
            " R=" + to_string(round(recovered)));
    
    let day = 1;
    while (day <= time_periods) {
        // Calculate new infections and recoveries
        let new_infections = transmission_rate * susceptible * infected / total_population;
        let new_recoveries = recovery_rate * infected;
        
        // Update populations
        susceptible = susceptible - new_infections;
        infected = infected + new_infections - new_recoveries;
        recovered = recovered + new_recoveries;
        
        // Ensure populations don't go negative
        if (susceptible < 0) susceptible = 0;
        if (infected < 0) infected = 0;
        if (recovered < 0) recovered = 0;
        
        println("Day " + to_string(day) + ": S=" + to_string(round(susceptible)) + 
                " I=" + to_string(round(infected)) + 
                " R=" + to_string(round(recovered)));
        
        day = day + 1;
    }
}

function calculate_basic_reproduction_number(transmission_rate, recovery_rate) {
    return transmission_rate / recovery_rate;
}

function calculate_herd_immunity_threshold(r0) {
    return 1.0 - (1.0 / r0);
}

// Test scenarios
println("");
println("=== SCENARIO 1: Seasonal Flu Outbreak ===");
println("Population: 10000, Initial infected: 10, R0 = 1.5");
let flu_r0 = calculate_basic_reproduction_number(0.15, 0.1);
let flu_herd_immunity = calculate_herd_immunity_threshold(flu_r0);
println("R0: " + to_string(round(flu_r0)));
println("Herd immunity threshold: " + to_string(round(flu_herd_immunity * 100)) + "%");
sir_model_simple(9990, 10, 0, 0.15, 0.1, 10);

println("");
println("=== SCENARIO 2: Measles Outbreak (High R0) ===");
let measles_r0 = calculate_basic_reproduction_number(1.5, 0.1);
let measles_herd_immunity = calculate_herd_immunity_threshold(measles_r0);
println("R0: " + to_string(round(measles_r0)));
println("Herd immunity threshold: " + to_string(round(measles_herd_immunity * 100)) + "%");
sir_model_simple(9995, 5, 0, 1.5, 0.1, 8);

println("");
println("âœ… Epidemiology modeling completed successfully!");
