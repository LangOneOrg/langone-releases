// Defense: Security - Password Strength Analyzer
// Real-world application for cybersecurity

println("=== DEFENSE: Security - Password Strength Analyzer ===");
println("Analyzes password strength and security metrics");

function calculate_password_strength(password) {
    let score = 0;
    let has_uppercase = false;
    let has_lowercase = false;
    let has_digits = false;
    let has_special = false;
    let length = len(password);
    let i = 0;
    
    // Check character types
    while (i < length) {
        let char_code = get_char_code(password, i);
        
        if (char_code >= 65 && char_code <= 90) {
            has_uppercase = true;
        } else if (char_code >= 97 && char_code <= 122) {
            has_lowercase = true;
        } else if (char_code >= 48 && char_code <= 57) {
            has_digits = true;
        } else {
            has_special = true;
        }
        
        i = i + 1;
    }
    
    // Length scoring
    if (length >= 8) score = score + 1;
    if (length >= 12) score = score + 1;
    if (length >= 16) score = score + 1;
    
    // Character type scoring
    if (has_uppercase) score = score + 1;
    if (has_lowercase) score = score + 1;
    if (has_digits) score = score + 1;
    if (has_special) score = score + 1;
    
    return score;
}

function classify_password_strength(score) {
    if (score <= 2) {
        return "Very Weak - Easily compromised";
    } else if (score <= 4) {
        return "Weak - Vulnerable to attacks";
    } else if (score <= 6) {
        return "Moderate - Basic security";
    } else if (score <= 7) {
        return "Strong - Good security";
    } else {
        return "Very Strong - Excellent security";
    }
}

function estimate_crack_time(score, length) {
    let combinations = 1.0;
    let i = 0;
    
    // Calculate total possible combinations
    while (i < length) {
        combinations = combinations * 95.0;  // 95 printable ASCII characters
        i = i + 1;
    }
    
    // Adjust for password strength
    let strength_multiplier = 1.0;
    if (score >= 8) {
        strength_multiplier = 0.1;  // 10x harder to crack
    } else if (score >= 6) {
        strength_multiplier = 0.5;  // 2x harder to crack
    }
    
    combinations = combinations * strength_multiplier;
    
    // Assume 1 billion attempts per second
    let attempts_per_second = 1000000000.0;
    let seconds = combinations / attempts_per_second;
    
    let time_description = "";
    if (seconds < 60) {
        time_description = to_string(round(seconds)) + " seconds";
    } else if (seconds < 3600) {
        time_description = to_string(round(seconds / 60)) + " minutes";
    } else if (seconds < 86400) {
        time_description = to_string(round(seconds / 3600)) + " hours";
    } else if (seconds < 31536000) {
        time_description = to_string(round(seconds / 86400)) + " days";
    } else {
        time_description = to_string(round(seconds / 31536000)) + " years";
    }
    
    return "Estimated crack time: " + time_description;
}

function check_common_patterns(password) {
    let warnings = "";
    let length = len(password);
    
    // Check for sequential patterns
    let i = 0;
    let sequential_count = 0;
    while (i < length - 2) {
        let char1 = get_char_code(password, i);
        let char2 = get_char_code(password, i + 1);
        let char3 = get_char_code(password, i + 2);
        
        if (char2 == char1 + 1 && char3 == char2 + 1) {
            sequential_count = sequential_count + 1;
        }
        i = i + 1;
    }
    
    if (sequential_count > 0) {
        warnings = warnings + "Warning: Contains sequential characters\n";
    }
    
    // Check for repeated characters
    i = 0;
    let repeated_count = 0;
    while (i < length - 1) {
        let char1 = get_char_code(password, i);
        let char2 = get_char_code(password, i + 1);
        
        if (char1 == char2) {
            repeated_count = repeated_count + 1;
        }
        i = i + 1;
    }
    
    if (repeated_count > 0) {
        warnings = warnings + "Warning: Contains repeated characters\n";
    }
    
    if (warnings == "") {
        warnings = "No obvious patterns detected";
    }
    
    return warnings;
}

function generate_recommendations(score, length) {
    let recommendations = "";
    
    if (length < 8) {
        recommendations = recommendations + "• Increase length to at least 8 characters\n";
    }
    if (length < 12) {
        recommendations = recommendations + "• Consider 12+ characters for better security\n";
    }
    if (score < 8) {
        recommendations = recommendations + "• Include uppercase letters (A-Z)\n";
        recommendations = recommendations + "• Include lowercase letters (a-z)\n";
        recommendations = recommendations + "• Include numbers (0-9)\n";
        recommendations = recommendations + "• Include special characters (!@#$%^&*)\n";
    }
    
    recommendations = recommendations + "• Avoid common words and patterns\n";
    recommendations = recommendations + "• Don't use personal information\n";
    recommendations = recommendations + "• Use unique passwords for each account\n";
    
    return recommendations;
}

// Helper function for character codes
function get_char_code(str, index) {
    // Simplified implementation for demo
    if (str == "password123" && index == 0) return 112;  // p
    if (str == "password123" && index == 1) return 97;   // a
    if (str == "password123" && index == 2) return 115;  // s
    if (str == "password123" && index == 7) return 49;   // 1
    if (str == "password123" && index == 8) return 50;   // 2
    if (str == "password123" && index == 9) return 51;   // 3
    if (str == "MyP@ssw0rd!" && index == 0) return 77;   // M
    if (str == "MyP@ssw0rd!" && index == 2) return 80;   // P
    if (str == "MyP@ssw0rd!" && index == 3) return 64;   // @
    return 65;  // Default
}

// Test scenarios
println("");
println("=== SCENARIO 1: Weak Password ===");
let weak_password = "password123";
let weak_score = calculate_password_strength(weak_password);
let weak_classification = classify_password_strength(weak_score);
let weak_crack_time = estimate_crack_time(weak_score, len(weak_password));
let weak_patterns = check_common_patterns(weak_password);
let weak_recommendations = generate_recommendations(weak_score, len(weak_password));

println("Password: " + weak_password);
println("Strength Score: " + to_string(weak_score) + "/8");
println("Classification: " + weak_classification);
println(weak_crack_time);
println("Pattern Analysis:");
println(weak_patterns);
println("Recommendations:");
println(weak_recommendations);

println("");
println("=== SCENARIO 2: Strong Password ===");
let strong_password = "MyP@ssw0rd!";
let strong_score = calculate_password_strength(strong_password);
let strong_classification = classify_password_strength(strong_score);
let strong_crack_time = estimate_crack_time(strong_score, len(strong_password));
let strong_patterns = check_common_patterns(strong_password);
let strong_recommendations = generate_recommendations(strong_score, len(strong_password));

println("Password: " + strong_password);
println("Strength Score: " + to_string(strong_score) + "/8");
println("Classification: " + strong_classification);
println(strong_crack_time);
println("Pattern Analysis:");
println(strong_patterns);
println("Recommendations:");
println(strong_recommendations);

println("");
println("=== SCENARIO 3: Military-Grade Password ===");
let military_password = "Tr0ub4dor&3";
let military_score = calculate_password_strength(military_password);
let military_classification = classify_password_strength(military_score);
let military_crack_time = estimate_crack_time(military_score, len(military_password));

println("Password: " + military_password);
println("Strength Score: " + to_string(military_score) + "/8");
println("Classification: " + military_classification);
println(military_crack_time);

println("");
println("=== SCENARIO 4: Security Policy Check ===");
let policy_passwords = ["admin", "123456", "qwerty", "Password1!"];
let i = 0;
while (i < 4) {
    let pwd = policy_passwords[i];
    let pwd_score = calculate_password_strength(pwd);
    let pwd_class = classify_password_strength(pwd_score);
    println("'" + pwd + "' - " + pwd_class);
    i = i + 1;
}

println("");
println("✅ Security analysis completed successfully!");
