// Defense: Military - Ballistics Calculator
// Real-world application for military calculations

println("=== DEFENSE: Military - Ballistics Calculator ===");
println("Calculates trajectory, range, and impact for military projectiles");

function calculate_trajectory(initial_velocity, angle_degrees, target_distance, projectile_mass) {
    let angle_radians = angle_degrees * 3.14159 / 180.0;
    let g = 9.81;
    
    // Calculate time of flight
    let flight_time = (2.0 * initial_velocity * sin(angle_radians)) / g;
    
    // Calculate maximum range
    let max_range = (initial_velocity * initial_velocity * sin(2.0 * angle_radians)) / g;
    
    // Calculate impact velocity
    let impact_velocity = initial_velocity;  // Simplified (ignoring air resistance)
    
    // Calculate kinetic energy at impact
    let kinetic_energy = 0.5 * projectile_mass * impact_velocity * impact_velocity;
    
    return "Flight time: " + to_string(round(flight_time)) + "s, " +
           "Max range: " + to_string(round(max_range)) + "m, " +
           "Impact velocity: " + to_string(round(impact_velocity)) + "m/s, " +
           "Kinetic energy: " + to_string(round(kinetic_energy)) + "J";
}

function calculate_mortar_trajectory(initial_velocity, angle_degrees, target_elevation) {
    let angle_radians = angle_degrees * 3.14159 / 180.0;
    let g = 9.81;
    
    // Calculate horizontal range
    let horizontal_range = (initial_velocity * initial_velocity * sin(2.0 * angle_radians)) / g;
    
    // Calculate maximum height
    let max_height = (initial_velocity * initial_velocity * sin(angle_radians) * sin(angle_radians)) / (2.0 * g);
    
    // Adjust for target elevation
    let adjusted_range = horizontal_range * (1.0 + target_elevation / 1000.0);
    
    return "Horizontal range: " + to_string(round(horizontal_range)) + "m, " +
           "Max height: " + to_string(round(max_height)) + "m, " +
           "Adjusted range: " + to_string(round(adjusted_range)) + "m";
}

function calculate_armor_penetration(projectile_mass, impact_velocity, armor_thickness, armor_material) {
    let kinetic_energy = 0.5 * projectile_mass * impact_velocity * impact_velocity;
    
    // Material penetration resistance (simplified)
    let resistance_factor = 1.0;
    if (armor_material == "steel") {
        resistance_factor = 1.0;
    } else if (armor_material == "aluminum") {
        resistance_factor = 0.3;
    } else if (armor_material == "composite") {
        resistance_factor = 1.5;
    }
    
    let penetration_power = kinetic_energy / (armor_thickness * resistance_factor * 1000000.0);
    
    let penetration_result = "";
    if (penetration_power > 1.0) {
        penetration_result = "Full penetration - armor defeated";
    } else if (penetration_power > 0.5) {
        penetration_result = "Partial penetration - significant damage";
    } else if (penetration_power > 0.2) {
        penetration_result = "Minimal penetration - surface damage only";
    } else {
        penetration_result = "No penetration - armor intact";
    }
    
    return "Penetration power: " + to_string(round(penetration_power * 100)) + "% - " + penetration_result;
}

function calculate_blast_radius(explosive_mass, explosive_type) {
    let tnt_equivalent = 0.0;
    
    // TNT equivalent calculations (simplified)
    if (explosive_type == "TNT") {
        tnt_equivalent = explosive_mass;
    } else if (explosive_type == "C4") {
        tnt_equivalent = explosive_mass * 1.34;
    } else if (explosive_type == "Semtex") {
        tnt_equivalent = explosive_mass * 1.6;
    } else if (explosive_type == "Dynamite") {
        tnt_equivalent = explosive_mass * 1.25;
    }
    
    // Blast radius calculation (simplified formula)
    let lethal_radius = 10.0 * sqrt(tnt_equivalent);
    let damage_radius = 25.0 * sqrt(tnt_equivalent);
    let shockwave_radius = 50.0 * sqrt(tnt_equivalent);
    
    return "TNT equivalent: " + to_string(round(tnt_equivalent)) + "kg, " +
           "Lethal radius: " + to_string(round(lethal_radius)) + "m, " +
           "Damage radius: " + to_string(round(damage_radius)) + "m, " +
           "Shockwave radius: " + to_string(round(shockwave_radius)) + "m";
}

function assess_weapon_effectiveness(weapon_type, target_type, engagement_range) {
    let effectiveness_score = 0;
    
    // Weapon effectiveness factors
    if (weapon_type == "rifle") {
        if (target_type == "personnel") {
            effectiveness_score = 85;
        } else if (target_type == "vehicle") {
            effectiveness_score = 25;
        } else if (target_type == "fortification") {
            effectiveness_score = 15;
        }
    } else if (weapon_type == "machine_gun") {
        if (target_type == "personnel") {
            effectiveness_score = 90;
        } else if (target_type == "vehicle") {
            effectiveness_score = 30;
        } else if (target_type == "fortification") {
            effectiveness_score = 20;
        }
    } else if (weapon_type == "anti_tank") {
        if (target_type == "personnel") {
            effectiveness_score = 60;
        } else if (target_type == "vehicle") {
            effectiveness_score = 95;
        } else if (target_type == "fortification") {
            effectiveness_score = 80;
        }
    }
    
    // Range effectiveness adjustment
    if (engagement_range > 500) {
        effectiveness_score = effectiveness_score - 20;
    } else if (engagement_range > 300) {
        effectiveness_score = effectiveness_score - 10;
    }
    
    if (effectiveness_score < 0) {
        effectiveness_score = 0;
    }
    
    let effectiveness_level = "";
    if (effectiveness_score >= 80) {
        effectiveness_level = "Highly effective";
    } else if (effectiveness_score >= 60) {
        effectiveness_level = "Effective";
    } else if (effectiveness_score >= 40) {
        effectiveness_level = "Moderately effective";
    } else if (effectiveness_score >= 20) {
        effectiveness_level = "Limited effectiveness";
    } else {
        effectiveness_level = "Not effective";
    }
    
    return "Effectiveness: " + to_string(effectiveness_score) + "% - " + effectiveness_level;
}

// Helper functions
function sin(angle) {
    // Simplified sine approximation
    let x = angle;
    if (x > 6.28318) x = x - 6.28318;
    if (x < 0) x = x + 6.28318;
    return x - (x * x * x) / 6.0 + (x * x * x * x * x) / 120.0;
}

function sqrt(value) {
    // Simplified square root approximation
    let x = value;
    let i = 0;
    while (i < 10) {
        x = (x + value / x) / 2.0;
        i = i + 1;
    }
    return x;
}

// Test scenarios
println("");
println("=== SCENARIO 1: Rifle Trajectory ===");
let rifle_trajectory = calculate_trajectory(800.0, 30.0, 400.0, 0.01);
println("7.62mm rifle round (800 m/s, 30°, 10g projectile):");
println(rifle_trajectory);

println("");
println("=== SCENARIO 2: Mortar Fire ===");
let mortar_trajectory = calculate_mortar_trajectory(150.0, 60.0, 500.0);
println("81mm mortar (150 m/s, 60°, target at 500m elevation):");
println(mortar_trajectory);

println("");
println("=== SCENARIO 3: Armor Penetration ===");
let armor_pen = calculate_armor_penetration(0.025, 1500.0, 50.0, "steel");
println("25mm APFSDS round vs 50mm steel armor:");
println(armor_pen);

println("");
println("=== SCENARIO 4: Explosive Blast ===");
let blast_radius = calculate_blast_radius(5.0, "C4");
println("5kg C4 explosive:");
println(blast_radius);

println("");
println("=== SCENARIO 5: Weapon Effectiveness ===");
let rifle_vs_personnel = assess_weapon_effectiveness("rifle", "personnel", 300.0);
let anti_tank_vs_vehicle = assess_weapon_effectiveness("anti_tank", "vehicle", 200.0);
let mg_vs_fortification = assess_weapon_effectiveness("machine_gun", "fortification", 600.0);

println("Rifle vs Personnel at 300m: " + rifle_vs_personnel);
println("Anti-tank vs Vehicle at 200m: " + anti_tank_vs_vehicle);
println("Machine gun vs Fortification at 600m: " + mg_vs_fortification);

println("");
println("=== SCENARIO 6: Tactical Analysis ===");
println("Mission: Clear building with enemy personnel");
let weapon_effectiveness = assess_weapon_effectiveness("rifle", "personnel", 50.0);
println("Recommended weapon: Rifle");
println(weapon_effectiveness);

println("");
println("✅ Military ballistics calculations completed successfully!");
