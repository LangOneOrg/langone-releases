// Health: Epidemiology - Disease Spread Model
// Real-world application for public health modeling

println("=== HEALTH: Epidemiology - Disease Spread Model ===");
println("Models infectious disease transmission and control");

function sir_model(initial_susceptible, initial_infected, initial_recovered, 
                   transmission_rate, recovery_rate, time_periods) {
    let susceptible = initial_susceptible;
    let infected = initial_infected;
    let recovered = initial_recovered;
    let total_population = susceptible + infected + recovered;
    
    let results = "Day 0: S=" + to_string(round(susceptible)) + 
                  " I=" + to_string(round(infected)) + 
                  " R=" + to_string(round(recovered)) + "\n";
    
    let day = 1;
    while (day <= time_periods) {
        // Calculate new infections and recoveries
        let new_infections = transmission_rate * susceptible * infected / total_population;
        let new_recoveries = recovery_rate * infected;
        
        // Update populations
        susceptible = susceptible - new_infections;
        infected = infected + new_infections - new_recoveries;
        recovered = recovered + new_recoveries;
        
        // Ensure populations don't go negative
        if (susceptible < 0) susceptible = 0;
        if (infected < 0) infected = 0;
        if (recovered < 0) recovered = 0;
        
        results = results + "Day " + to_string(day) + ": S=" + to_string(round(susceptible)) + 
                  " I=" + to_string(round(infected)) + 
                  " R=" + to_string(round(recovered)) + "\n";
        
        day = day + 1;
    }
    
    return results;
}

function calculate_basic_reproduction_number(transmission_rate, recovery_rate) {
    return transmission_rate / recovery_rate;
}

function calculate_herd_immunity_threshold(r0) {
    return 1.0 - (1.0 / r0);
}

function assess_epidemic_severity(peak_infected, total_population, total_recovered) {
    let attack_rate = (total_recovered / total_population) * 100.0;
    let peak_percentage = (peak_infected / total_population) * 100.0;
    
    let severity = "";
    if (attack_rate < 5.0) {
        severity = "Low severity - Limited outbreak";
    } else if (attack_rate < 20.0) {
        severity = "Moderate severity - Significant outbreak";
    } else if (attack_rate < 50.0) {
        severity = "High severity - Major epidemic";
    } else {
        severity = "Very high severity - Pandemic level";
    }
    
    return "Attack rate: " + to_string(round(attack_rate)) + "%, Peak: " + 
           to_string(round(peak_percentage)) + "% - " + severity;
}

function vaccination_impact(initial_susceptible, vaccination_coverage, vaccine_effectiveness) {
    let vaccinated_susceptible = initial_susceptible * vaccination_coverage * vaccine_effectiveness;
    let remaining_susceptible = initial_susceptible - vaccinated_susceptible;
    
    return "Vaccinated: " + to_string(round(vaccinated_susceptible)) + 
           ", Remaining susceptible: " + to_string(round(remaining_susceptible));
}

// Test scenarios
println("");
println("=== SCENARIO 1: Seasonal Flu Outbreak ===");
println("Population: 10000, Initial infected: 10, R0 = 1.5");
let flu_results = sir_model(9990, 10, 0, 0.15, 0.1, 30);
println(flu_results);

let flu_r0 = calculate_basic_reproduction_number(0.15, 0.1);
let flu_herd_immunity = calculate_herd_immunity_threshold(flu_r0);
println("R0: " + to_string(round(flu_r0)));
println("Herd immunity threshold: " + to_string(round(flu_herd_immunity * 100)) + "%");

println("");
println("=== SCENARIO 2: Measles Outbreak (High R0) ===");
println("Population: 10000, Initial infected: 5, R0 = 15");
let measles_results = sir_model(9995, 5, 0, 1.5, 0.1, 25);
println(measles_results);

let measles_r0 = calculate_basic_reproduction_number(1.5, 0.1);
let measles_herd_immunity = calculate_herd_immunity_threshold(measles_r0);
println("R0: " + to_string(round(measles_r0)));
println("Herd immunity threshold: " + to_string(round(measles_herd_immunity * 100)) + "%");

println("");
println("=== SCENARIO 3: COVID-19 Simulation ===");
println("Population: 100000, Initial infected: 50, R0 = 2.5");
let covid_results = sir_model(99950, 50, 0, 0.25, 0.1, 40);
println(covid_results);

let covid_r0 = calculate_basic_reproduction_number(0.25, 0.1);
let covid_herd_immunity = calculate_herd_immunity_threshold(covid_r0);
println("R0: " + to_string(round(covid_r0)));
println("Herd immunity threshold: " + to_string(round(covid_herd_immunity * 100)) + "%");

println("");
println("=== SCENARIO 4: Vaccination Campaign Impact ===");
println("Population: 10000, Vaccination coverage: 70%, Vaccine effectiveness: 90%");
let vaccination_effect = vaccination_impact(10000, 0.7, 0.9);
println(vaccination_effect);

println("");
println("=== SCENARIO 5: Outbreak with Social Distancing ===");
println("Reduced transmission rate: 0.05 (vs normal 0.15)");
let distancing_results = sir_model(9990, 10, 0, 0.05, 0.1, 30);
println(distancing_results);

println("");
println("âœ… Epidemiology modeling completed successfully!");
