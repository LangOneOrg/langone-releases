// Green Code: Basic Edge AI Optimization
println("=== GREEN CODE: Edge AI Optimization ===");

function calculate_power_reduction(original_power, optimization_level) {
    let reduction = 0.0;
    
    if (optimization_level == 1) {
        reduction = 20.0; // 20% reduction
    } else if (optimization_level == 2) {
        reduction = 40.0; // 40% reduction
    } else if (optimization_level == 3) {
        reduction = 60.0; // 60% reduction
    }
    
    let new_power = original_power * (1.0 - reduction / 100.0);
    return new_power;
}

function analyze_edge_deployment(model_size_mb, target_power_watts) {
    let baseline_power = model_size_mb * 0.01; // 10mW per MB
    
    let optimization_level = 1;
    let optimized_power = calculate_power_reduction(baseline_power, optimization_level);
    
    while (optimized_power > target_power_watts && optimization_level < 3) {
        optimization_level = optimization_level + 1;
        optimized_power = calculate_power_reduction(baseline_power, optimization_level);
    }
    
    let feasibility = "";
    if (optimized_power <= target_power_watts) {
        feasibility = "Feasible";
    } else {
        feasibility = "Not feasible";
    }
    
    return "Model: " + to_string(round(model_size_mb)) + "MB, " +
           "Target power: " + to_string(round(target_power_watts)) + "W, " +
           "Optimized power: " + to_string(round(optimized_power)) + "W, " +
           "Feasibility: " + feasibility;
}

// Test scenarios
println("");
println("=== SCENARIO 1: GPT-2 Edge Deployment ===");
let gpt2_deployment = analyze_edge_deployment(500.0, 1.0);
println(gpt2_deployment);

println("");
println("=== SCENARIO 2: BERT Edge Deployment ===");
let bert_deployment = analyze_edge_deployment(440.0, 0.5);
println(bert_deployment);

println("");
println("=== SCENARIO 3: TinyBERT Edge Deployment ===");
let tinybert_deployment = analyze_edge_deployment(56.0, 0.2);
println(tinybert_deployment);

println("");
println("âœ… Green Code analysis completed successfully!");
