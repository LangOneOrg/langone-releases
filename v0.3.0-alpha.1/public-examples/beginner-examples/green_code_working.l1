// Green Code: Edge AI Power Optimization
println("=== GREEN CODE: Edge AI Power Optimization ===");

function calculate_power_optimization(original_power, reduction_percent) {
    let optimized_power = original_power * (1.0 - reduction_percent / 100.0);
    return optimized_power;
}

function analyze_model_efficiency(model_size_mb, target_power_watts) {
    let baseline_power = model_size_mb * 0.01;
    
    // Calculate optimization needed
    let power_reduction_needed = (baseline_power - target_power_watts) / baseline_power * 100.0;
    
    let optimization_strategy = "";
    if (power_reduction_needed <= 20.0) {
        optimization_strategy = "Light optimization (quantization)";
    } else if (power_reduction_needed <= 50.0) {
        optimization_strategy = "Moderate optimization (quantization + pruning)";
    } else {
        optimization_strategy = "Heavy optimization (full pipeline)";
    }
    
    return "Model: " + to_string(round(model_size_mb)) + "MB, " +
           "Baseline power: " + to_string(round(baseline_power)) + "W, " +
           "Target: " + to_string(round(target_power_watts)) + "W, " +
           "Strategy: " + optimization_strategy;
}

// Test scenarios
println("");
println("=== SCENARIO 1: GPT-2 Small Edge Deployment ===");
let gpt2_analysis = analyze_model_efficiency(500.0, 1.0);
println(gpt2_analysis);

let gpt2_optimized = calculate_power_optimization(5.0, 80.0);
println("GPT-2 optimized power: " + to_string(round(gpt2_optimized)) + "W");

println("");
println("=== SCENARIO 2: BERT Base Edge Deployment ===");
let bert_analysis = analyze_model_efficiency(440.0, 0.5);
println(bert_analysis);

let bert_optimized = calculate_power_optimization(4.4, 90.0);
println("BERT optimized power: " + to_string(round(bert_optimized)) + "W");

println("");
println("=== SCENARIO 3: TinyBERT Ultra-Low Power ===");
let tinybert_analysis = analyze_model_efficiency(56.0, 0.1);
println(tinybert_analysis);

let tinybert_optimized = calculate_power_optimization(0.56, 85.0);
println("TinyBERT optimized power: " + to_string(round(tinybert_optimized)) + "W");

println("");
println("=== SCENARIO 4: Power Reduction Analysis ===");
let reduction_20 = calculate_power_optimization(2.0, 20.0);
let reduction_50 = calculate_power_optimization(2.0, 50.0);
let reduction_80 = calculate_power_optimization(2.0, 80.0);

println("2W model with 20% reduction: " + to_string(round(reduction_20)) + "W");
println("2W model with 50% reduction: " + to_string(round(reduction_50)) + "W");
println("2W model with 80% reduction: " + to_string(round(reduction_80)) + "W");

println("");
println("=== SCENARIO 5: Edge Device Power Budget ===");
let edge_budget = 1.0; // 1W budget
let model_power = 0.8; // 0.8W for model
let system_overhead = edge_budget - model_power;

println("Edge device power budget: " + to_string(round(edge_budget)) + "W");
println("Model allocation: " + to_string(round(model_power)) + "W");
println("System overhead: " + to_string(round(system_overhead)) + "W");

let efficiency_ratio = model_power / edge_budget * 100.0;
println("Model efficiency ratio: " + to_string(round(efficiency_ratio)) + "%");

println("");
println("âœ… Green Code power optimization completed successfully!");
