# CLI Application Example

```langone
// CLI Application with LangOne Alpha
use std::io;

fn main() {
    println("Welcome to LangOne Alpha CLI! ðŸš€");
    
    loop {
        print("langone> ");
        let input = io::read_line();
        
        if input == "exit" {
            println("Goodbye!");
            break;
        }
        
        if input == "help" {
            show_help();
        } else if input == "version" {
            println("LangOne v0.3.0-alpha.1 - Aurora Intelligence Alpha");
        } else if input == "die" {
            show_die_info();
        } else {
            println("Unknown command. Type 'help' for available commands.");
        }
    }
}

fn show_help() {
    println("Available commands:");
    println("  help    - Show this help message");
    println("  version - Show version information");
    println("  die     - Show Developer Intelligence Engine info");
    println("  exit    - Exit the application");
}

fn show_die_info() {
    println("Developer Intelligence Engine (DIE):");
    println("  - First programming language with personalized code assistant and coach");
    println("  - Privacy-first design with 100% opt-in telemetry");
    println("  - Adaptive tutorials and personalized suggestions");
    println("  - Community-driven language evolution");
}
```

## Running the Example

```bash
# Save as cli_app.l1 and run
langone run cli_app.l1
```

## Features Demonstrated

- **Interactive CLI**: Loop-based command processing
- **User Input**: Reading from standard input
- **Functions**: Modular code organization
- **Control Flow**: Loops and conditionals
- **String Operations**: String comparison and manipulation
